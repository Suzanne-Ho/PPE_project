import Head from 'next/head'
import Layout from '../../components/Layout.js'
import {useState} from 'react'
import {useSupabaseClient} from '@supabase/auth-helpers-react'
import UserContext from '../../components/UserContext'
import {useContext} from 'react'
import {useRouter} from 'next/router'
import {Disclosure, Transition} from "@headlessui/react";
import Link from "next/link";
import md from "markdown-it";
import {supabase} from "../api/supabase";


export default function Cours({lessons}) {

    const {user} = useContext(UserContext)
    const state = {button: 1}
    const supabase = useSupabaseClient()
    const [message, setMessage] = useState(null)
    const router = useRouter()

    /* Add a lecture */
    const onSubmit = async function (e) {
        e.preventDefault()
        const data = new FormData(e.target)

        /* checking if user filled the title, subject and the content of his new post */
        if (data.get('title') && data.get('message') && data.get('subject') && data.get('description') && data.get('promotion')) {

            const {data: database, error} = await supabase
                .from('lessons')
                .select('title')
                .eq('title', data.get('title'))
                .limit(1)

            /* cheching if the title is not already used for another lesson */
            if (database.length > 0) {
                setMessage(
                    <div>
                        <h2 className="text-center mt-3">Error</h2>
                        <p>Sorry, this title is already used.</p>
                    </div>
                )
            } else {

                var datetime = new Date();
                data.set('title', data.get('title').replace(/\s+/g, '-').toLowerCase())
                data.set('author', user.email)
                data.set('created_at', datetime.toISOString().split('T')[0])

                const {error} = await supabase
                    .from('lessons')
                    .insert(Object.fromEntries(data), {returning: 'minimal'})
                if (error) {
                    setMessage('Sorry, an unexpected error occured.')
                } else {
                    setMessage(
                        <div>
                            <h2 className="text-center mt-3">Confirmation</h2>
                            <p>Votre message a été posté avec succès. Maintenant tout le monde peut le voir.</p>
                        </div>
                    )
                    e.target.reset()
                }
            }
        } else {
            setMessage(
                <div>
                    <h2 className="text-center mt-3">Error</h2>
                    <p>Tous les champs doivent être remplis.</p>
                </div>
            )

        }
        {/* Cancel */
        }
        if (state.button == 0) {
            setMessage(
                <div>
                    <h2 className="text-center mt-3">Annuler</h2>
                    <p>Peut-être la prochaine fois.</p>
                </div>
            )
            e.target.reset()
        }
    }
    return (
        <Layout>
            <Head>
                <title>Edubet - Admin Cours</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <Disclosure>
                <Disclosure.Button className="flex justify-center">
                    <div>
                        <div
                            className="flex rounded px-3 py-2 text-neutralText bg-primaryBg hover:bg-onPrimaryBg hover:text-hoverText">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                 stroke="currentColor" className="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                      d="M9 12.75l3 3m0 0l3-3m-3 3v-7.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                            <p className="pl-2">Nouveau cours</p>

                        </div>

                    </div>
                </Disclosure.Button>

                <Transition
                    enter="transition duration-100 ease-out"
                    enterFrom="transform scale-95 opacity-0"
                    enterTo="transform scale-100 opacity-100"
                    leave="transition duration-75 ease-out"
                    leaveFrom="transform scale-100 opacity-100"
                    leaveTo="transform scale-95 opacity-0"
                >
                    <Disclosure.Panel>
                        <h1 className="flex justify-center mb-4 text-4xl font-extrabold tracking-tight leading-none md:text-5xl lg:text-6xl text-neutralTitle pb-8">
                            Nouveau cours
                        </h1>
                        {/* form to add a lesson */}
                        <form onSubmit={onSubmit}>
                            <div className="grid gap-4 sm:grid-cols-2 sm:gap-6">
                                <div className="sm:col-span-2">
                                    <label
                                        className="block mb-2 text-sm font-medium text-neutralText">
                                        Titre
                                    </label>
                                    <input placeholder="Titre" type="text" name="title"
                                           className="placeholder-onNeutralBg bg-neutralBg border border-onNeutralBg text-onNeutralBg text-sm rounded-lg focus:ring-primaryBg focus:border-primaryBg block w-full p-2.5"
                                    />
                                </div>
                                <div className="sm:col-span-2">
                                    <label
                                        className="block mb-2 text-sm font-medium text-neutralText">
                                        Description
                                    </label>
                                    <input placeholder="Description" type="text" name="description"
                                           className="placeholder-onNeutralBg bg-neutralBg border border-onNeutralBg text-onNeutralBg text-sm rounded-lg focus:ring-primaryBg focus:border-primaryBg block w-full p-2.5"
                                    />
                                </div>
                                <div className="sm:col-span-2">
                                    <label
                                        className="block mb-2 text-sm font-medium text-neutralText">
                                        Promotion
                                    </label>
                                    <input placeholder="Promotion" type="text" name="promotion"
                                           className="placeholder-onNeutralBg bg-neutralBg border border-onNeutralBg text-onNeutralBg text-sm rounded-lg focus:ring-primaryBg focus:border-primaryBg block w-full p-2.5"
                                    />
                                </div>
                                <div className="sm:col-span-2">
                                    <label
                                        className="block mb-2 text-sm font-medium text-neutralText">
                                        Matière
                                    </label>
                                    <input placeholder="Matière" type="text" name="subject"
                                           className="placeholder-onNeutralBg bg-neutralBg border border-onNeutralBg text-onNeutralBg text-sm rounded-lg focus:ring-primaryBg focus:border-primaryBg block w-full p-2.5"
                                    />
                                </div>
                                <div className="sm:col-span-2">
                                    <label
                                        className="block mb-2 text-sm font-medium text-neutralText">
                                        Contenu
                                    </label>
                                    <textarea id="Contenu" rows="15" placeholder="Content" type="text" name="message"
                                              className="placeholder-onNeutralBg block p-2.5 w-full bg-neutralBg border border-onNeutralBg text-onNeutralBg text-sm rounded-lg focus:ring-primaryBg focus:border-primaryBg block w-full p-2.5"
                                    ></textarea>
                                </div>
                            </div>
                            <div className="flex mt-5 space-x-5">
                                <button
                                    className="p-6 rounded px-3 py-2 text-neutralText bg-primaryBg hover:bg-onPrimaryBg hover:text-hoverText"
                                    onClick={() => (state.button = 1)}>
                                    Publier
                                </button>
                                <button
                                    className="p-6 rounded px-3 py-2 text-neutralText bg-primaryBg hover:bg-onPrimaryBg hover:text-hoverText"
                                    onClick={() => (state.button = 0)}>
                                    Annuler
                                </button>
                            </div>
                        </form>
                    </Disclosure.Panel>
                </Transition>
            </Disclosure>

            {message &&
                <div aria-label="Overlow below the drawer dialog"
                     className="fixed inset-0 bg-black/80 flex items-center justify-center"
                     onClick={() => setMessage(null)} role="dialog">
                    <div aria-label="Alert pane" className="max-h-[90vh] max-w-[95vw] overflow-auto p-4 prose bg-white">
                        {message}
                    </div>
                </div>
            }

            <h2 className="text-center font-serif  uppercase text-3xl xl:text-6xl mt-10">Liste de tes Cours</h2>
            <div className="container w-100 lg:w-4/5 mx-auto flex flex-col">

                {lessons.map((lesson) => (
                    user && user.email === lesson.author ?
                        <Link key={lesson.id} href={`/tutorat/${lesson.id}`}>
                            <div
                                className="flex flex-col md:flex-row overflow-hidden bg-white border border-gray-200 rounded-lg shadow-xl  mt-4 w-100 mx-2">

                                <div className="w-full py-4 px-6 text-gray-800 flex flex-col justify-between">
                                    <div className='flex justify-between'>
                                        <div>
                                            <h3 className="font-semibold text-lg leading-tight truncate">{lesson.title}</h3>
                                        </div>
                                        <div>
                                            {lesson.promotion}
                                        </div>
                                    </div>
                                    <p className="text-sm font- text-gray-700 uppercase tracking-wide font-semibold mt-2">
                                        {lesson.subject}
                                    </p>
                                    <p className="mt-5">
                                        {lesson.description}
                                    </p>
                                    <p className="text-xs text-gray-700 uppercase tracking-wide font-semibold mt-5">
                                        {lesson.author} &bull; {lesson.created_at}
                                    </p>

                                </div>
                            </div>
                        </Link> : null
                ))}
            </div>

        </Layout>

    )
}

export async function getStaticProps(ctx) {

    let lessons = []
    let {data, error, status} = await supabase
        .from('lessons')
        .select(`*`)
    if (!error) lessons = data // handle errors
    return {
        props: {
            lessons: lessons
        }
    };
}
