import { useRouter } from 'next/router'
import { useContext, useEffect } from 'react'
import Head from 'next/head'
import Layout from '../components/Layout.js'
import UserContext from '../components/UserContext'
import { supabase } from './api/supabase'
import { useState } from 'react'
import Avatar from '../components/Avatar.js'


export default function Profile({
  profiles
}) {
  const { user, logout, loading } = useContext(UserContext)
  const [message, setMessage] = useState(null)
  const state = { button: 0 }
  const router = useRouter()
  useEffect(() => {
    if (!(user || loading)) {
      router.push('/login')
    }
  }, [user, loading, router])
  const onClickLogout = function () {
    logout()
  }

  /* update the firstname and lastname of the user*/
  const onSubmit = async function (e) {

    e.preventDefault()
    const data = new FormData(e.target)
    const { data: database, error } = await supabase
      .from('profiles')
      .select('user_email')
      .eq('user_email', user.email)
      .limit(1)

    /* cheching if the user is already in our profiles table */
    if (database.length > 0) {
      const { error } = await supabase
        .from('profiles')
        .update(Object.fromEntries(data))
        .eq('user_email', user.email)
    }
    /* if not, we create a profile and fill it with the information provided  */
    else {
      const { error } = await supabase
        .from('profiles')
        .insert([
          { user_email: user.email},
        ])
    }
    if (error) {
      setMessage('Sorry, an unexpected error occured.')
    } else {
      setMessage(
        <div>
          <h2 className="text-center mt-3">Confirmation</h2>
          <p>Your profile has been successfully updated.</p>
        </div>
      )
      e.target.reset()
      router.push('/profile')
    }

  }

  return (
    <Layout>
      <Head>
        <title>WebTech - user signed in</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!(user || loading) ?
        <p>Redirecting...</p>
        :
        <>
          {/* display the user information on profile page */}
          <h1 className="flex justify-center mb-4 text-4xl font-extrabold tracking-tight leading-none md:text-5xl lg:text-6xl text-neutralTitle pb-8">
            Bienvenue {user.user_metadata.preferred_username ? user.user_metadata.preferred_username : user.email} !
          </h1>
          <h5 className="mb-5 text-3xl font-extrabold tracking-tight md:text-4xl lg:text-5xl leading-none text-neutralTitle pb-0">
            Voici ton profil:
          </h5>
          <p className="flex mt-3 text-2xl tracking-tight text-neutralText">
            Email: {user.email}
          </p>

          {/* form to update the firstname and lastname of the user
          <form onSubmit={onSubmit}>
            <div className="grid gap-4 sm:grid-cols-1 sm:gap-0">
              <label className="text-2xl tracking-tight text-neutralText">
                First Name:
                <input className="ml-3 mt-3 border border-onNeutralBg rounded-lg focus:ring-primaryBg focus:bg-neutralBg focus:text-onNeutralBg focus:border-primaryBg px-3 py-2 text-neutralText bg-neutralBg hover:bg-onPrimaryBg hover:text-hoverText" type="text" name="firstname" />
              </label>
              <label className="text-2xl tracking-tight text-neutralText">
                Last Name:
                <input placeholder='' className="ml-3 mt-3 border border-onNeutralBg rounded-lg focus:ring-primaryBg focus:bg-neutralBg focus:text-onNeutralBg focus:border-primaryBg px-3 py-2 text-neutralText bg-neutralBg hover:bg-onPrimaryBg hover:text-hoverText" type="text" name="lastname" />
              </label>
            </div>
            <button className="flex mt-3 p-6 rounded px-3 py-2 text-neutralText bg-primaryBg hover:bg-onPrimaryBg hover:text-hoverText" >
              Save
            </button>
          </form>
          */}
          <button
            className="mt-3 rounded px-3 py-2 text-neutralText bg-primaryBg hover:bg-onPrimaryBg hover:text-hoverText"
            onClick={onClickLogout}
          >
            Logout
          </button>
          {message &&
            <div aria-label="Overlow below the drawer dialog" className="fixed inset-0 bg-black/80 flex items-center justify-center" onClick={() => setMessage(null)} role="dialog">
              <div aria-label="Alert pane" className="max-h-[90vh] max-w-[95vw] overflow-auto p-4 prose bg-white">
                {message}
              </div>
            </div>
          }
        </>
      }
    </Layout>
  )
}
export async function getStaticProps() {
  let profiles = {}
  const { data, error, status } = await supabase
    .from('profiles')
    .select('*')
  if (!error) profiles = data // handle errors
  return {
    props: {
      profiles: profiles
    }
  }
}
